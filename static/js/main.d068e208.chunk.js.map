{"version":3,"sources":["components/FeedbackCounter/FeedbackCounter.js","components/Statistics/Statisticks.js","components/Section/Section.js","components/Notification/Notification.js","App.js","index.js","components/FeedbackCounter/FeedbackCounter.module.css"],"names":["FeedbackCounter","onLeaveFeedback","className","style","FeedbackCounter__controls","btn","name","type","onClick","Statistics","good","neutral","bad","total","positivePercentage","list","text","Section","title","children","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","setCountTotalFeedback","countPositiveFeedbackPercentage","setCountPositiveFeedbackPercentage","useEffect","toFixed","event","target","prevState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"kOA8CeA,EA1CS,SAAC,GAA0B,IAAvBC,EAAsB,EAAtBA,gBAGpB,OAEQ,sBAAKC,UAAWC,IAAMC,0BAAtB,UACI,wBACIF,UAAWC,IAAME,IACjBC,KAAK,OACLC,KAAK,SACLC,QAASP,EAJb,kBAQA,wBACIC,UAAWC,IAAME,IACjBC,KAAK,UACLC,KAAK,SACLC,QAASP,EAJb,qBAQA,wBACIC,UAAWC,IAAME,IACjBC,KAAK,MACLC,KAAK,SACLC,QAASP,EAJb,qB,gBCFLQ,EApBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACf,mCACI,sBAAKZ,UAAWC,IAAMY,KAAtB,UACI,oBAAGb,UAAWC,IAAMa,KAApB,mBAAiCN,KACjC,oBAAGR,UAAWC,IAAMa,KAApB,sBAAoCL,KACpC,oBAAGT,UAAWC,IAAMa,KAApB,kBAAgCJ,KAChC,oBAAGV,UAAWC,IAAMa,KAApB,oBAAkCH,KAClC,oBAAGX,UAAWC,IAAMa,KAApB,iCAAgDF,EAAhD,a,gBCKGG,EAZC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACZ,qCACA,oBAAIjB,UAAWC,IAAMe,MAArB,SAA6BA,IACxBC,M,gBCKMC,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACjB,oBAAInB,UAAWC,IAAMe,MAArB,SAA6BG,KCElB,SAASC,IACpB,MAAwBC,mBAAS,GAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOZ,EAAP,KAAgBc,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAOX,EAAP,KAAYc,EAAZ,KACA,EAAoDH,mBAAS,GAA7D,mBAAOI,EAAP,KAA2BC,EAA3B,KACA,EAA8EL,mBAAS,GAAvF,mBAAOM,EAAP,KAAwCC,EAAxC,KAkDI,OAjBAC,qBAAU,WACVH,EAAsBlB,EAAOC,EAAUC,KACpC,CAACF,EAAMC,EAASC,IAInBmB,qBAAU,WACND,GAAqCpB,EAAOiB,EAAsB,KAAKK,QAAQ,MAChF,CAACtB,EAAMiB,IAUN,mCACI,eAAC,EAAD,CAAST,MAAM,wBAAf,UAEI,cAAC,EAAD,CAEIjB,gBAtDG,SAAAgC,GACnB,IAAQ3B,EAAS2B,EAAMC,OAAf5B,KAiBK,SAATA,GACAkB,GAAQ,SAAAW,GAAS,OAAIA,EAAY,KAGxB,YAAT7B,GACAmB,GAAW,SAAAU,GAAS,OAAIA,EAAY,KAG3B,QAAT7B,GACAoB,GAAO,SAAAS,GAAS,OAAIA,EAAY,QA8BvBR,EAAqB,EAEd,cAAC,EAAD,CAAcN,QAAQ,sBAEtB,cAAC,EAAD,CACIX,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOc,EACPb,mBAAoBe,S,MCxEpDO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAChB,EAAD,MAEJiB,SAASC,eAAe,U,sCCX5BC,EAAOC,QAAU,CAAC,0BAA4B,mDAAmD,IAAM,+B","file":"static/js/main.d068e208.chunk.js","sourcesContent":["import React from 'react'\r\nimport style from './FeedbackCounter.module.css'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackCounter = ({  onLeaveFeedback }) => {\r\n    // const { good, neutral, bad } = options;\r\n    \r\n        return (\r\n                \r\n                <div className={style.FeedbackCounter__controls}>\r\n                    <button\r\n                        className={style.btn}\r\n                        name=\"good\"\r\n                        type=\"button\"\r\n                        onClick={onLeaveFeedback}\r\n                        // data-value={good}\r\n                    >Good</button>\r\n                \r\n                    <button\r\n                        className={style.btn}\r\n                        name=\"neutral\"\r\n                        type=\"button\"\r\n                        onClick={onLeaveFeedback}\r\n                        // data-value={neutral}\r\n                    >Neutral</button>\r\n                \r\n                    <button\r\n                        className={style.btn}\r\n                        name=\"bad\"\r\n                        type=\"button\"\r\n                        onClick={onLeaveFeedback}\r\n                        // data-value={bad}\r\n                    >Bad</button>\r\n                </div>\r\n        )\r\n}\r\n\r\nFeedbackCounter.propTypes = {\r\n    // options: PropTypes.shape({\r\n        // good: PropTypes.number.isRequired,\r\n        // neutral: PropTypes.number.isRequired,\r\n        // bad: PropTypes.number.isRequired,\r\n    // }).isRequired,\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackCounter;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\r\n    <>\r\n        <div className={style.list}>\r\n            <p className={style.text}>Good: {good}</p>\r\n            <p className={style.text}>Neutral: {neutral}</p>\r\n            <p className={style.text}>Bad: {bad}</p>\r\n            <p className={style.text}>Total: {total}</p>\r\n            <p className={style.text}>PositivePercentage: { positivePercentage}%</p>\r\n        </div>\r\n    </>\r\n)\r\n\r\nStatistics.propTypes = {\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n    total: PropTypes.number.isRequired,\r\n    positivePercentage: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Statistics;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Section.module.css'\r\n\r\nconst Section = ({ title, children }) => (\r\n    <>\r\n    <h2 className={style.title}>{title}</h2>\r\n        {children}\r\n        </>\r\n);\r\n\r\nSection.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport style from './Notification.module.css';\r\n\r\nconst Notification = ({ message }) => (\r\n    <h2 className={style.title}>{message}</h2>\r\n);\r\n\r\nNotification.propTypes = {\r\n    message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;","import React, {useState, useEffect} from 'react';\r\nimport FeedbackCounter from './components/FeedbackCounter';\r\nimport Statistics from './components/Statistics';\r\nimport Section from './components/Section'\r\nimport Notification from './components/Notification'\r\n// import Controls  from './components/Counter';\r\n\r\nexport default function App() {\r\n    const [good, setGood] = useState(0);\r\n    const [neutral, setNeutral] = useState(0);\r\n    const [bad, setBad] = useState(0);\r\n    const [countTotalFeedback, setCountTotalFeedback] = useState(0);\r\n    const [countPositiveFeedbackPercentage, setCountPositiveFeedbackPercentage] = useState(0);\r\n   \r\n    const handleBtnClick = event => {\r\n        const { name } = event.target;\r\n        // switch (name) {\r\n        //     case 'good':\r\n        //         setGood(prevState => prevState + 1);\r\n        //         break;\r\n            \r\n        //     case 'neutral':\r\n        //         setNeutral(prevState => prevState + 1);\r\n        //         break;\r\n            \r\n        //     case 'bad':\r\n        //         setBad(prevState => prevState + 1);\r\n        //         break;\r\n            \r\n        //     default:\r\n        //         return;\r\n        // }\r\n        if (name === 'good') {\r\n            setGood(prevState => prevState + 1)\r\n        }\r\n        \r\n        if (name === 'neutral') {\r\n            setNeutral(prevState => prevState + 1)\r\n        };\r\n\r\n        if (name === 'bad') {\r\n            setBad(prevState => prevState + 1)\r\n        };\r\n        }\r\n        \r\n        useEffect(() => {\r\n        setCountTotalFeedback(good + neutral + bad);\r\n        }, [good, neutral, bad]);\r\n    \r\n        // const countTotalFeedback = () => good + neutral + bad;\r\n        \r\n        useEffect(() => {\r\n            setCountPositiveFeedbackPercentage(((good / countTotalFeedback) * 100).toFixed(0))\r\n        }, [good, countTotalFeedback ])\r\n        \r\n    \r\n        // const countPositiveFeedbackPercentage = () => {\r\n        //     return ((good / countTotalFeedback) * 100);\r\n        // }\r\n        // const { good, neutral, bad } = options;\r\n    \r\n        // const positivePercentage = Number(countPositiveFeedbackPercentage().toFixed(0));\r\n        return (\r\n            <>\r\n                <Section title=\"Please leave feedback\">\r\n                    \r\n                    <FeedbackCounter\r\n                        // options={this.state}\r\n                        onLeaveFeedback={handleBtnClick}\r\n                    />\r\n        \r\n                    {countTotalFeedback < 1\r\n                        ? (\r\n                            <Notification message=\"No feedback given\" />)\r\n                        : (\r\n                            <Statistics\r\n                                good={good}\r\n                                neutral={neutral}\r\n                                bad={bad}\r\n                                total={countTotalFeedback}\r\n                                positivePercentage={countPositiveFeedbackPercentage} />)\r\n                    }\r\n                </Section>\r\n            </>\r\n        )\r\n    }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import User from './user.json';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\n// ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"FeedbackCounter__controls\":\"FeedbackCounter_FeedbackCounter__controls__15CGn\",\"btn\":\"FeedbackCounter_btn__2KVs-\"};"],"sourceRoot":""}